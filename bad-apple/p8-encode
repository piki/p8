#!/usr/bin/env ruby
#
# Usage:
#   ./p8-encode <frameskip> <width> <enc> <files...> > output.lua
#     <frameskip> - encode every Nth frame, for 1/N fps.
#     <width>     - scale the frame to NxN before encoding.
#     <enc>       - plain|diff|age to pick an encoding
#                    - plain encodes frames independently
#                    - diff encodes delta frames instead of key frames
#                    - age each pixel over time
#                   age produces smaller files for frameskip <= 3
#
# Example:
#   ./p8-encode 1 16 age ~/img/output*.png > bad-apple-30fps.lua
#   ./p8-encode 7 32 plain ~/img/output*.png > bad-apple-hires.lua

require 'rubygems'
require 'bundler/setup'
require 'RMagick'
include Magick

# set CHEATS to true to drop some individual pixels to produce smaller files
# It reduces file size by a about 1/3, but looks pretty bad.
CHEATS = false
MAX_AGE = 4  # maximum number of frames a pixel can be left wrong
@age = Hash.new(0)

def usage
	$stderr.puts File.read($0).lines[2..14].map{|line| line.gsub(/^# ?/, "")}
	exit
end

def main
	usage unless ARGV.size >= 4
	frameskip = ARGV.shift.to_i
	res = ARGV.shift.to_i
	@prev = [0] * (res * res)
	@cheats = 0
	encoding = ARGV.shift.downcase
	fail "bad encoding: #{encoding}" unless %w[plain diff age].include?(encoding)
	files = ARGV

	print header.chomp

	frames = []

	files = (0...files.size).select{|n| n%frameskip == 0}.map{|n| files[n]}
	files.each do |fn|
		canvas = ImageList.new(fn).first
		square = [canvas.columns, canvas.rows].min
		canvas.crop!(CenterGravity, square, square)
		canvas.scale!(res, res)
		canvas = canvas.threshold(QuantumRange/2)
		bw = []
		canvas.each_pixel do |pixel, c, r|
			bw << ((pixel.intensity >= QuantumRange/2) ? 1 : 0)
		end

		$stderr.puts "\033[H\033[2J#{fn}"
		(0...res).each do |y|
			$stderr.puts (0...res).map { |x|
				idx = y*res+x
				idx = (@prev[idx]<<1)+bw[idx]
#				" o. "[idx]
				"X X "[idx]
			}.join
		end
		if encoding == "age"
			frames << bw
		elsif encoding == "diff"
			put_frame_differential(bw, res)
		else
			put_frame(bw, res)
		end
		$stderr.puts "cheats: #{@cheats}" if encoding == "diff" && CHEATS
	end
	if encoding == "age"
		put_all_frames(frames, res)
		check_all_frames(frames, res)
		print minify(all_frames_footer(frameskip, res))
	else
		print minify(footer(frameskip, res, encoding == "diff"))
	end
end

def minify(s)
	s.
		gsub("\t", "").
		gsub("\n\n", "\n").
		gsub(")\n", ")").
		gsub("]\n", "]").
		gsub("}\n", "}").
		gsub(") ", ")").
		gsub("] ", "]").
		gsub("} ", "}").
		gsub(" (", "(").
		gsub(" [", "[").
		gsub(" {", "{")
end

def header
	<<EOF
pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
f={"
EOF
end

CHARMAP=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#%(){}[]<>+=/*:;.,~_-@$^|&?`'"

def enc(n)
	if n >= CHARMAP.size-2
		lo = n % (CHARMAP.size-2)
		hi = n / (CHARMAP.size-2)
		CHARMAP[-2] + CHARMAP[hi] + CHARMAP[lo]
	else
		CHARMAP[n]
	end
end

def enc_rle(s)
	ret = ""
	while !s.empty?
		if s.size >= 3 && s[0...3].uniq.size == 1
			n = s.index{|v| v!=s.first} || s.size
			ret << "'"
			ret << enc(n)
			ret << enc(s.first)
			s.shift(n)
		else
			ret << enc(s.shift)
		end
	end
	ret
end

@slen = 0
def maybe_flush(len)
	@slen += len
	if @slen > 32000
		print '","'
		@slen = 0
	end
end

def put_all_frames(frames, res)
	@s = []
	s = []
	age = []
	(0...res*res).each do |i|
		n = frames.index{|bw| bw[i] != 0}
		age[i] = n
		s << n
		@s << n
	end
	(0...res*res).select{|i| age[i]==0}.each do |i|
		n = frames.index{|bw| bw[i] != 1}
		fail if n==0
		age[i] = n
		s << n
		@s << n
	end
	s = enc_rle(s)
	print s
	maybe_flush(s.size)

	(1...frames.size).each do |fr|
		$stderr.print "#{fr+1}/#{frames.size}\r"
		s = []
		(0...res*res).each do |i|
			age[i] -= 1
			if age[i] == 0
				n = frames[fr..-1].index{|bw| bw[i] != frames[fr][i]} || (frames.size-fr)
				age[i] = n
				s << n
				@s << n
			end
		end
		s = enc_rle(s)
		print s
		maybe_flush(s.size)
	end
	$stderr.puts
end

def check_all_frames(frames, res)
	prev = [0] * (res*res)
	age = (0...res*res).map { @s.shift }
	frames.each do |fr|
		cur = prev.clone
		(0...res*res).each do |p|
			if age[p] == 0
				cur[p] = 1-prev[p]
				age[p] = @s.shift
			end
			age[p] -= 1
		end
		if cur != fr
			$stderr.puts "mismatch"
			$stderr.puts "  want: #{fr.flatten.join}"
			$stderr.puts "   got: #{cur.flatten.join}"
			fail
		end
		prev = cur
	end
end

def all_frames_footer(frameskip, res)
	sqsize = 128/res
	<<EOF
"}

m={}

for i=1,#{CHARMAP.size} do
	m[sub("#{CHARMAP}",i,_)]=i-1
end

s=#f+1
q=0
function z()
	if q>0 then
		q-=1
		return v
	end
	if o>#f[s] then
		s+=1
		o=1
	end
	r=m[sub(f[s],o,_)]
	o+=1
	if r==#{CHARMAP.size-1} then
		qq=z()-1
		v=z()
		q=qq
		return v
	end
	if r==#{CHARMAP.size-2} then
		o+=2
		return m[sub(f[s],o-1,_)]+#{CHARMAP.size-2}*m[sub(f[s],o-2,_)]
	end
	return r
end

function _draw()
	if s>#f or (s==#f and o>#f[s]) then
		#{"n=0" if frameskip>1}
		s=1
		o=1
		cls()
		music()
		age={}
		for i=1,#{res*res} do
			age[i]=z()
		end
	end
	#{if frameskip>1
	"
	n+=1
	if (n%#{frameskip}!=0) then return end
	"
	end}
	for p=0,#{res*res-1} do
		if age[p+1]==0 then
			x=p%#{res}*#{sqsize}
			y=p\\#{res}*#{sqsize}
			rectfill(x,y,x+#{sqsize-1},y+#{sqsize-1},7-pget(x,y))
			age[p+1]=z()
		end
		age[p+1]-=1
	end
end
EOF
end

def put_frame(bw, res)
	fail unless bw.size == res*res
	if bw == @prev
		ret = " "
	else
		ret = ""
		col = 0
		left = 0
		while bw[left] == @prev[left]
			left += 1
		end
		left -= (left%4)
		ret << enc(left/4)
		while left < bw.size
			break if bw[left..-1] == @prev[left..-1]
			right = left
			while right < bw.size && bw[right] == col
				right += 1
			end
			ret << enc(right-left)
			col ^= 1
			left = right
		end
	end
	print "#{ret}#{CHARMAP[-1]}"
	maybe_flush(ret.size+1)
	@prev = bw
end

def put_frame_differential(bw, res)
	fail unless bw.size == res*res
	if CHEATS
		mod = bw.clone
		(2...bw.size-2).each do |i|
			if @age[i] < MAX_AGE && bw[i-2..i+2] == [@prev[i-2], @prev[i-1], 1-@prev[i], @prev[i+1], @prev[i+2]]
				mod[i] = 1-bw[i]
				@cheats += 1
				@age[i] += 1
			elsif @age[i] < MAX_AGE && bw[i-2..i+2] == [1-@prev[i-2], 1-@prev[i-1], @prev[i], 1-@prev[i+1], 1-@prev[i+2]]
				mod[i] = 1-bw[i]
				@cheats += 1
				@age[i] += 1
			else
				mod[i] = bw[i]
				@age[i] = 0
			end
		end
		bw = mod
	end

	delta = (0...bw.size).map{|i| @prev[i] ^ bw[i]}
	if bw == @prev
		ret = " "
	else
		ret = ""
		flip = 1
		left = 0
		while bw[left] == @prev[left]
			left += 1
		end
		left -= (left%4)
		ret << enc(left/4)
		while left < bw.size
			break if delta[left..-1].sum == 0
			right = left
			while right < bw.size && delta[right] == flip
				right += 1
			end
			ret << enc(right-left)
			flip ^= 1
			left = right
		end
	end
	print "#{ret}#{CHARMAP[-1]}"
	maybe_flush(ret.size+1)
	@prev = bw
end

def footer(frameskip, res, differential_encoding)
	sqsize = 128/res
	<<EOF
"}

m={}

for i=1,#{CHARMAP.size} do
	m[sub("#{CHARMAP}",i,_)] = i-1
end

s=#f+1
function z()
	if o>#f[s] then
		s+=1
		o=1
	end
	r=m[sub(f[s],o,_)]
	o+=1
	if (r==#{CHARMAP.size-1}) then return -1 end
	if r==#{CHARMAP.size-2} then
		o+=2
		return m[sub(f[s],o-1,_)]+#{CHARMAP.size-2}*m[sub(f[s],o-2,_)]
	end
	return r
end

function _draw()
	if s>#f or (s==#f and o>#f[s]) then
		#{"n=0" if frameskip>1}
		s=1
		o=1
		cls()
		music()
	end
	#{if frameskip>1
	"
	n+=1
	if (n%#{frameskip}!=0) then return end
	"
	end}
	#{differential_encoding ? "c=true" : "c=0"}
	p=4*z()
	k=z()
	while k!=-1 do
		for j=1,k do
			x=(p%#{res})*#{sqsize}
			y=(p\\#{res})*#{sqsize}
			#{differential_encoding ? "if (c) then
				c=7-pget(x,y)
				rectfill(x,y,x+#{sqsize-1},y+#{sqsize-1},c)
			end" : "rectfill(x,y,x+#{sqsize-1},y+#{sqsize-1},c)"}
			p+=1
		end
		#{differential_encoding ? "c=not c" : "c=(c+7)%14"}
		k=z()
	end
end
EOF
# c = color, or change flag
# f = frame data
# i, j = iterators
# k = run-length encoding count
# m = map from character value to 6-bit number
# n = counter from 1..number of _draw() calls (30*duration)
#     omitted when frameskip==1
# s = current string within f
# o = offset within f[s]
# p = pointer to output square
# q = RLE bytes remaining to return from z()
# v = RLE value to return from z()
end

main
